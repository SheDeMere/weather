{"version":3,"sources":["components/Weather.jsx","redux/action.jsx","components/Form.jsx","components/Weathers.jsx","components/App.js","redux/weatherReducer.jsx","redux/index.jsx","index.js"],"names":["Weather","props","weather","image","current","condition","icon","temp","temp_c","city","location","name","message","useSelector","state","weatherItems","error","code","className","width","src","alt","loadWeather","dispatch","type","fetch","then","response","json","payload","Form","useDispatch","useState","setCity","useHotkeys","handleClick","enableOnTags","placeholder","value","onChange","e","target","handleChange","style","fontSize","onClick","Weathers","loading","color","height","App","useEffect","initialState","weatherReducer","action","logger","createLogger","diff","collapsed","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"gLAsBeA,MAnBf,SAAiBC,GACf,IAAMC,EAAUD,EAAMC,QAChBC,EAAQD,EAAQE,SAAWF,EAAQE,QAAQC,UAAUC,KACrDC,EAAOL,EAAQE,SAAWF,EAAQE,QAAQI,OAC1CC,EAAOP,EAAQQ,UAAYR,EAAQQ,SAASC,KAC5CC,EAAUC,aAAY,SAACC,GAAD,OAAWA,EAAMZ,QAAQa,gBACrD,OAAOH,EAAQI,OAAgC,OAAvBJ,EAAQI,MAAMC,KACpC,8BACE,mBAAGC,UAAU,QAAb,8BAGF,sBAAKA,UAAU,cAAf,UACE,qBAAKC,MAAO,IAAKC,IAAKjB,EAAOkB,IAAI,KACjC,4BAAIZ,IACJ,oBAAGS,UAAU,OAAb,yBAAiCX,EAAjC,c,QCjBOe,EAAc,SAACb,GAC1B,OAAO,SAACc,GACNA,EAAS,CAAEC,KAAM,uBAEjBC,MAAM,mFAAD,OACgFhB,EADhF,YAGFiB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACLL,EAAS,CACPC,KAAM,uBACNK,QAASD,S,QC+BJE,MArCf,SAAc7B,GACZ,IAAMsB,EAAWQ,cACjB,EAAwBC,mBAAS,IAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KAKAC,YACE,SACA,WACEC,EAAY1B,GACZwB,EAAQ,MAEV,CAAEG,aAAc,CAAC,WAGnB,IAAMD,EAAc,WAClBZ,EAASD,EAAYb,IACrBwB,EAAQ,KAEV,OACE,qBAAKf,UAAU,OAAf,SACE,gCACE,uBACEM,KAAK,OACLa,YAAY,OACZC,MAAO7B,EACP8B,SAAU,SAACC,GAAD,OAxBG,SAACA,GACpBP,EAAQO,EAAEC,OAAOH,OAuBMI,CAAaF,MAEhC,wBAAQG,MAAO,CAAEC,SAAU,IAAMC,QAASV,EAA1C,0B,iBCVOW,MAlBf,SAAkB7C,GAChB,IAAMC,EAAUW,aAAY,SAACC,GAAD,OAAWA,EAAMZ,QAAQa,gBAC/CgC,EAAUlC,aAAY,SAACC,GAAD,OAAWA,EAAMZ,QAAQ6C,WAErD,OACE,sBAAK7B,UAAU,UAAf,UACI6B,EAGA,qBAAK7B,UAAU,UAAf,SACE,cAAC,IAAD,CAAcM,KAAK,OAAOwB,MAAM,QAAQC,OAAQ,GAAI9B,MAAO,OAH7D,cAAC,EAAD,CAASjB,QAASA,IAMpB,cAAC,EAAD,QCASgD,MAdf,WACE,IAAM3B,EAAWQ,cAMjB,OAJAoB,qBAAU,WACR5B,EAASD,OACR,CAACC,IAGF,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,O,sBCdAkC,EAAe,CACnBrC,aAAc,GACdgC,SAAS,EACTtC,KAAM,IAuBO4C,EApBQ,WAAmC,IAAlCvC,EAAiC,uDAAzBsC,EAAcE,EAAW,uCACvD,OAAQA,EAAO9B,MACb,IAAK,qBACH,OAAO,2BACFV,GADL,IAEEiC,SAAS,IAGb,IAAK,uBACH,OAAO,2BACFjC,GADL,IAEEC,aAAcuC,EAAOzB,QACrBkB,SAAS,IAGb,QACE,OAAOjC,I,QCjBPyC,EAASC,YAAa,CAC1BC,MAAM,EACNC,WAAW,IAGPC,EAAcC,YAAgB,CAClC1D,QAASmD,IAKIQ,EAFDC,YAAYH,EAAaI,YAAgBC,IAAOT,ICR9DU,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.6de1cd78.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n\nfunction Weather(props) {\n  const weather = props.weather;\n  const image = weather.current && weather.current.condition.icon;\n  const temp = weather.current && weather.current.temp_c;\n  const city = weather.location && weather.location.name;\n  const message = useSelector((state) => state.weather.weatherItems);\n  return message.error && message.error.code === 1006 ? (\n    <div>\n      <p className=\"error\">City not found</p>\n    </div>\n  ) : (\n    <div className=\"weather_box\">\n      <img width={100} src={image} alt=\"\" />\n      <p>{city}</p>\n      <p className=\"temp\">Temperature {temp}Â°</p>\n    </div>\n  );\n}\n\nexport default Weather;\n","export const loadWeather = (city) => {\n  return (dispatch) => {\n    dispatch({ type: 'weather/load/start' });\n\n    fetch(\n      `http://api.weatherapi.com/v1/current.json?key=65d6fa8cb55a47c0aa1133000212904&q=${city}&aqi=no`,\n    )\n      .then((response) => response.json())\n      .then((json) => {\n        dispatch({\n          type: 'weather/load/success',\n          payload: json,\n        });\n      });\n  };\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadWeather } from '../redux/action';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nfunction Form(props) {\n  const dispatch = useDispatch();\n  const [city, setCity] = useState('');\n  const handleChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  useHotkeys(\n    'enter',\n    () => {\n      handleClick(city);\n      setCity('')\n    },\n    { enableOnTags: ['INPUT'] },\n  );\n\n  const handleClick = () => {\n    dispatch(loadWeather(city));\n    setCity('')\n  };\n  return (\n    <div className=\"form\">\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"City\"\n          value={city}\n          onChange={(e) => handleChange(e)}\n        />\n        <button style={{ fontSize: 13 }} onClick={handleClick}>\n          Search\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Form;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Weather from './Weather';\nimport Form from './Form';\nimport ReactLoading from 'react-loading';\n\nfunction Weathers(props) {\n  const weather = useSelector((state) => state.weather.weatherItems);\n  const loading = useSelector((state) => state.weather.loading);\n\n  return (\n    <div className=\"weather\">\n      {!loading ? (\n        <Weather weather={weather} />\n      ) : (\n        <div className=\"loading\">\n          <ReactLoading type=\"spin\" color=\"white\" height={50} width={50} />\n        </div>\n      )}\n      <Form />\n    </div>\n  );\n}\n\nexport default Weathers;\n","import Weathers from './Weathers';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { loadWeather } from '../redux/action';\nimport ReactLoading from 'react-loading';\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadWeather());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Weathers />\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\n  weatherItems: [],\n  loading: false,\n  city: '',\n};\n\nconst weatherReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'weather/load/start':\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case 'weather/load/success':\n      return {\n        ...state,\n        weatherItems: action.payload,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default weatherReducer;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { createLogger } from 'redux-logger/src';\nimport weatherReducer from './weatherReducer';\nimport thunk from 'redux-thunk';\n\nconst logger = createLogger({\n  diff: true,\n  collapsed: true,\n});\n\nconst rootReducer = combineReducers({\n  weather: weatherReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}